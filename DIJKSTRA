#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int main(){
  int edges,vertices;
  cin>>vertices;
  cin>>edges;
  unordered_map<int,vector<pair<int,int> > > g(vertices);
  for(int i=0;i<edges;i++){
    int first,second,weight;
    cin>>first>>v>>w;
    g[first].push_back({second,weight});
    g[second].push_back({first,weight});
  }
  vector<int> dist(vertices,INT_MAX);
  dist[0]=0;
  // you can also use disjoint set
  priority_queue<pair<int,int>,vector<pair<int,int> > , greater<pair<int,int> > > pq;
  pq.push({0,0});
  while(!pq.empty()){
    pair<int,int> temp= pq.top();
    pq.pop();
    for(int i=0;i<g[temp.second].size();i++){
           pair<int,int> p=g[temp.second][i];
           if(temp.first+p.second < dist[p.first]){
            dist[p.first]=temp.first+p.second;
            pq.push({temp.first+p.second,p.first});
           }
    }
  }
  cout<<"minimum ditsance to ease vertices from sourcxe :" ;
  for(int i=0;i<vertices;i++){
    cout<<dist[i]<<" ";
}
}
